import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Generate a simple dataset
# Features: file_size, num_functions, entropy, contains_crypto, num_strings
def generate_sample(is_malware):
    if is_malware:
        return [
            np.random.randint(100000, 1000000),  # file_size
            np.random.randint(1000, 5000),       # num_functions
            np.random.uniform(6.5, 8.0),         # entropy
            1,                                   # contains_crypto
            np.random.randint(5000, 10000)       # num_strings
        ]
    else:
        return [
            np.random.randint(10000, 500000),    # file_size
            np.random.randint(100, 1000),        # num_functions
            np.random.uniform(4.0, 6.5),         # entropy
            np.random.choice([0, 1], p=[0.8, 0.2]),  # contains_crypto
            np.random.randint(1000, 5000)        # num_strings
        ]

# Generate dataset
np.random.seed(42)
n_samples = 1000
malware_samples = [generate_sample(True) for _ in range(n_samples // 2)]
benign_samples = [generate_sample(False) for _ in range(n_samples // 2)]

X = np.array(malware_samples + benign_samples)
y = np.array([1] * (n_samples // 2) + [0] * (n_samples // 2))

# Split the dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X_train, y_train)

# Make predictions
y_pred = clf.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)

print(f"Accuracy: {accuracy}")
print("\nConfusion Matrix:")
print(conf_matrix)
print("\nClassification Report:")
print(class_report)

# Feature importance
feature_importance = clf.feature_importances_
features = ['file_size', 'num_functions', 'entropy', 'contains_crypto', 'num_strings']
for feature, importance in zip(features, feature_importance):
    print(f"{feature}: {importance}")

# Test with new samples
new_samples = np.array([
    generate_sample(True),   # A malware sample
    generate_sample(False)   # A benign sample
])

predictions = clf.predict(new_samples)
print("\nPredictions for new samples:")
for sample, prediction in zip(new_samples, predictions):
    print(f"Sample: {sample}")
    print(f"Prediction: {'Malware' if prediction == 1 else 'Benign'}\n")
